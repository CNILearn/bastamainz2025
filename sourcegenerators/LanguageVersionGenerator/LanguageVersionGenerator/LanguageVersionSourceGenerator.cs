using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

using System.Text;

namespace LanguageVersionGenerator;

/// <summary>
/// A source generator that demonstrates using ParseOptionsProvider to detect C# language version
/// and generate different code based on the language features available.
/// </summary>
[Generator]
public class LanguageVersionSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Use ParseOptionsProvider to get language version information
        // Transform parse options to extract language version
        var languageVersionProvider = context.ParseOptionsProvider
            .Select(static (parseOptions, ct) => GetLanguageVersionInfo(parseOptions));

        // Register source generation based on language version
        context.RegisterSourceOutput(languageVersionProvider, static (spc, languageInfo) => 
            Execute(spc, languageInfo));
    }

    private static LanguageVersionInfo GetLanguageVersionInfo(ParseOptions parseOptions)
    {
        if (parseOptions is CSharpParseOptions csharpOptions)
        {
            var langVersion = csharpOptions.LanguageVersion;
            return new LanguageVersionInfo(
                langVersion,
                langVersion.MapSpecifiedToEffectiveVersion(),
                langVersion.ToDisplayString(),
                supportsRecords: langVersion >= LanguageVersion.CSharp9,
                supportsTopLevelPrograms: langVersion >= LanguageVersion.CSharp9,
                supportsFileScopedNamespaces: langVersion >= LanguageVersion.CSharp10,
                supportsGlobalUsings: langVersion >= LanguageVersion.CSharp10,
                supportsRequiredMembers: langVersion >= LanguageVersion.CSharp11,
                supportsGenericAttributes: langVersion >= LanguageVersion.CSharp11,
                supportsPrimaryConstructors: langVersion >= LanguageVersion.CSharp12,
                supportsCollectionExpressions: langVersion >= LanguageVersion.CSharp12,
                supportsUsingDeclarations: langVersion >= LanguageVersion.CSharp8,
                supportsNullCoalescingAssignment: langVersion >= LanguageVersion.CSharp8
            );
        }

        // Fallback for non-C# languages or when version cannot be determined
        return new LanguageVersionInfo(
            languageVersion: LanguageVersion.CSharp7_3,
            effectiveVersion: LanguageVersion.CSharp7_3,
            versionString: "Unknown",
            supportsRecords: false,
            supportsTopLevelPrograms: false,
            supportsFileScopedNamespaces: false,
            supportsGlobalUsings: false,
            supportsRequiredMembers: false,
            supportsGenericAttributes: false,
            supportsPrimaryConstructors: false,
            supportsCollectionExpressions: false,
            supportsUsingDeclarations: false,
            supportsNullCoalescingAssignment: false
        );
    }

    private static void Execute(SourceProductionContext context, LanguageVersionInfo languageInfo)
    {
        var sourceCode = GenerateLanguageVersionAwareCode(languageInfo);
        context.AddSource("LanguageVersionAware.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
    }

    private static string GenerateLanguageVersionAwareCode(LanguageVersionInfo info)
    {
        var namespaceDeclaration = info.SupportsFileScopedNamespaces 
            ? "namespace Generated;"
            : "namespace Generated\n{";
        
        var closingBrace = info.SupportsFileScopedNamespaces ? "" : "}";
        
        var globalUsings = info.SupportsGlobalUsings 
            ? "// Global usings are supported\n// global using System.Collections.Generic;\n"
            : "// Global usings not supported in this language version\n";

        var indent = info.SupportsFileScopedNamespaces ? "" : "    ";

        var personClass = GeneratePersonClass(info, indent);
        var dataClass = GenerateDataClass(info, indent);
        var utilityClass = GenerateUtilityClass(info, indent);

        return $$"""
            // <auto-generated/>
            #nullable enable
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;

            {{globalUsings}}
            {{namespaceDeclaration}}

            {{personClass}}

            {{dataClass}}

            {{utilityClass}}

            /// <summary>
            /// Information about the detected language version and available features
            /// </summary>
            {{indent}}public static class LanguageVersionInfo
            {{indent}}{
            {{indent}}    /// <summary>
            {{indent}}    /// Gets the detected C# language version
            {{indent}}    /// </summary>
            {{indent}}    public static string LanguageVersion => "{{info.VersionString}}";

            {{indent}}    /// <summary>
            {{indent}}    /// Gets information about supported language features
            {{indent}}    /// </summary>
            {{indent}}    public static string GetFeatureSupport()
            {{indent}}    {
            {{indent}}        var sb = new StringBuilder();
            {{indent}}        sb.AppendLine("=== C# Language Version Feature Support ===");
            {{indent}}        sb.AppendLine($"Detected Version: {{info.VersionString}}");
            {{indent}}        sb.AppendLine($"Records: {{(info.SupportsRecords ? "✓" : "✗")}}");
            {{indent}}        sb.AppendLine($"Top-level programs: {{(info.SupportsTopLevelPrograms ? "✓" : "✗")}}");
            {{indent}}        sb.AppendLine($"File-scoped namespaces: {{(info.SupportsFileScopedNamespaces ? "✓" : "✗")}}");
            {{indent}}        sb.AppendLine($"Global usings: {{(info.SupportsGlobalUsings ? "✓" : "✗")}}");
            {{indent}}        sb.AppendLine($"Required members: {{(info.SupportsRequiredMembers ? "✓" : "✗")}}");
            {{indent}}        sb.AppendLine($"Generic attributes: {{(info.SupportsGenericAttributes ? "✓" : "✗")}}");
            {{indent}}        sb.AppendLine($"Primary constructors: {{(info.SupportsPrimaryConstructors ? "✓" : "✗")}}");
            {{indent}}        sb.AppendLine($"Collection expressions: {{(info.SupportsCollectionExpressions ? "✓" : "✗")}}");
            {{indent}}        sb.AppendLine($"Using declarations: {{(info.SupportsUsingDeclarations ? "✓" : "✗")}}");
            {{indent}}        sb.AppendLine($"Null-coalescing assignment: {{(info.SupportsNullCoalescingAssignment ? "✓" : "✗")}}");
            {{indent}}        return sb.ToString();
            {{indent}}    }
            {{indent}}}
            {{closingBrace}}
            """;
    }

    private static string GeneratePersonClass(LanguageVersionInfo info, string indent)
    {
        if (info.SupportsRecords && info.SupportsPrimaryConstructors)
        {
            // C# 12+: Record with primary constructor
            var requiredAttribute = info.SupportsRequiredMembers ? "// [Required] - would require using System.ComponentModel.DataAnnotations;" : "";
            return $$"""
                /// <summary>
                /// Person record using C# 12+ primary constructor syntax
                /// </summary>
                {{indent}}public record Person(string Name, int Age)
                {{indent}}{
                {{indent}}    {{requiredAttribute}}
                {{indent}}    public string Email { get; init; } = string.Empty;
                {{indent}}}
                """;
        }
        else if (info.SupportsRecords)
        {
            // C# 9+: Record without primary constructor
            return $$"""
                /// <summary>
                /// Person record using C# 9+ record syntax
                /// </summary>
                {{indent}}public record Person
                {{indent}}{
                {{indent}}    public string Name { get; init; } = string.Empty;
                {{indent}}    public int Age { get; init; }
                {{indent}}    public string Email { get; init; } = string.Empty;
                {{indent}}}
                """;
        }
        else
        {
            // Pre-C# 9: Traditional class
            return $$"""
                /// <summary>
                /// Person class using traditional C# class syntax
                /// </summary>
                {{indent}}public class Person
                {{indent}}{
                {{indent}}    public string Name { get; set; } = string.Empty;
                {{indent}}    public int Age { get; set; }
                {{indent}}    public string Email { get; set; } = string.Empty;
                {{indent}}}
                """;
        }
    }

    private static string GenerateDataClass(LanguageVersionInfo info, string indent)
    {
        var collectionInit = info.SupportsCollectionExpressions 
            ? "get; } = [];"  // C# 12+ collection expressions
            : "get; } = new List<string>();";

        return $$"""
            /// <summary>
            /// Data processing class demonstrating language version-specific features
            /// </summary>
            {{indent}}public class DataProcessor
            {{indent}}{
            {{indent}}    public List<string> Items { {{collectionInit}}

            {{indent}}    /// <summary>
            {{indent}}    /// Processes data using language version-appropriate techniques
            {{indent}}    /// </summary>
            {{indent}}    public string ProcessData(string? input)
            {{indent}}    {
            {{(info.SupportsNullCoalescingAssignment 
                ? $"{indent}        input ??= \"default\";  // C# 8+ null-coalescing assignment"
                : $"{indent}        input = input ?? \"default\";  // Traditional null check")}}
            {{indent}}        
            {{indent}}        return $"Processed: {input}";
            {{indent}}    }

            {{indent}}    /// <summary>
            {{indent}}    /// Demonstrates resource management patterns
            {{indent}}    /// </summary>
            {{indent}}    public void ProcessFile(string filename)
            {{indent}}    {
            {{(info.SupportsUsingDeclarations 
                ? GenerateUsingDeclarationPattern(indent)
                : GenerateTraditionalUsingPattern(indent))}}
            {{indent}}    }
            {{indent}}}
            """;
    }

    private static string GenerateUsingDeclarationPattern(string indent)
    {
        return $$"""
            {{indent}}        // C# 8+ using declaration pattern
            {{indent}}        using var reader = new System.IO.StringReader("sample data");
            {{indent}}        var data = reader.ReadToEnd();
            {{indent}}        Items.Add(data);
            """;
    }

    private static string GenerateTraditionalUsingPattern(string indent)
    {
        return $$"""
            {{indent}}        // Traditional using statement pattern
            {{indent}}        using (var reader = new System.IO.StringReader("sample data"))
            {{indent}}        {
            {{indent}}            var data = reader.ReadToEnd();
            {{indent}}            Items.Add(data);
            {{indent}}        }
            """;
    }

    private static string GenerateUtilityClass(LanguageVersionInfo info, string indent)
    {
        var genericAttributeExample = info.SupportsGenericAttributes
            ? $"{indent}    /// This would support generic attributes in C# 11+\n{indent}    /// [SomeGenericAttribute<string>]\n"
            : $"{indent}    /// Generic attributes not supported in this language version\n";

        return $$"""
            /// <summary>
            /// Utility class demonstrating various language features
            /// </summary>
            {{indent}}public static class LanguageUtilities
            {{indent}}{
            {{genericAttributeExample}}{{indent}}    /// <summary>
            {{indent}}    /// Creates a list of items using version-appropriate syntax
            {{indent}}    /// </summary>
            {{indent}}    public static List<T> CreateList<T>(params T[] items)
            {{indent}}    {
            {{(info.SupportsCollectionExpressions 
                ? $"{indent}        // C# 12+ collection expressions\n{indent}        return [.. items];"
                : $"{indent}        // Traditional list creation\n{indent}        return new List<T>(items);")}}
            {{indent}}    }

            {{indent}}    /// <summary>
            {{indent}}    /// Demonstrates string interpolation and formatting
            {{indent}}    /// </summary>
            {{indent}}    public static string FormatMessage(string name, int count)
            {{indent}}    {
            {{indent}}        return $"Hello {name}, you have {count} items";
            {{indent}}    }
            {{indent}}}
            """;
    }

    /// <summary>
    /// Class containing information about the detected language version and feature support
    /// </summary>
    private class LanguageVersionInfo(
        LanguageVersion languageVersion,
        LanguageVersion effectiveVersion,
        string versionString,
        bool supportsRecords,
        bool supportsTopLevelPrograms,
        bool supportsFileScopedNamespaces,
        bool supportsGlobalUsings,
        bool supportsRequiredMembers,
        bool supportsGenericAttributes,
        bool supportsPrimaryConstructors,
        bool supportsCollectionExpressions,
        bool supportsUsingDeclarations,
        bool supportsNullCoalescingAssignment)
    {
        public LanguageVersion LanguageVersion { get; } = languageVersion;
        public LanguageVersion EffectiveVersion { get; } = effectiveVersion;
        public string VersionString { get; } = versionString;
        public bool SupportsRecords { get; } = supportsRecords;
        public bool SupportsTopLevelPrograms { get; } = supportsTopLevelPrograms;
        public bool SupportsFileScopedNamespaces { get; } = supportsFileScopedNamespaces;
        public bool SupportsGlobalUsings { get; } = supportsGlobalUsings;
        public bool SupportsRequiredMembers { get; } = supportsRequiredMembers;
        public bool SupportsGenericAttributes { get; } = supportsGenericAttributes;
        public bool SupportsPrimaryConstructors { get; } = supportsPrimaryConstructors;
        public bool SupportsCollectionExpressions { get; } = supportsCollectionExpressions;
        public bool SupportsUsingDeclarations { get; } = supportsUsingDeclarations;
        public bool SupportsNullCoalescingAssignment { get; } = supportsNullCoalescingAssignment;
    }
}