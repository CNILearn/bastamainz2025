[
  {
    HintName: InterceptsLocationAttribute.g.cs,
    SourceText:
// <auto-generated/>
        
#nullable enable
using System;

namespace System.Runtime.CompilerServices;

// .NET 9 InterceptsLocationAttribute with support for both old and new constructor formats.
// The new format uses (int version, string data) instead of (string filePath, int line, int character).
// This approach uses the new InterceptableLocation-based generation which eliminates the CS9270 warning.
[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
internal sealed class InterceptsLocationAttribute : Attribute
{
    // Legacy constructor for backward compatibility - this will show CS9270 warning with .NET 9+, preview feature with .NET 8
    public InterceptsLocationAttribute(string filePath, int line, int character)
    {
        FilePath = filePath;
        Line = line;
        Character = character;
    }

    // New constructor format used by InterceptableLocation.GetInterceptsLocationAttributeSyntax() with .NET 9+
    public InterceptsLocationAttribute(int version, string data)
    {
        Version = version;
        Data = data;
    }

    public string? FilePath { get; }  // for .NET 8
    public int Line { get; } // for .NET 8
    public int Character { get; } // for .NET 8
    public int Version { get; }
    public string? Data { get; }
}
  },
  {
    HintName: ActivityAttribute.g.cs,
    SourceText:
// <auto-generated/>
        
#nullable enable
using System;

namespace ActivitySourceGenerator.Attributes;

[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
public sealed class ActivityAttribute : Attribute
{
    public string? ActivitySourceName { get; set; }
    public string? ActivityName { get; set; }
    public bool RecordExceptions { get; set; } = true;
    public string? Tags { get; set; }
}
  },
  {
    HintName: ActivityInterceptors.g.cs,
    SourceText:
// <auto-generated/>
#nullable enable
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace TestNamespace;

file static class Intercept_TestClass_DoSomething_18_9
{
    private static readonly ActivitySource _activitySource = new("TestNamespace.TestClass");

    [global::System.Runtime.CompilerServices.InterceptsLocationAttribute(1, "XJbrrA8l81rLjMy9kk9X3i8BAAA=")]
    public static void DoSomething(string message)
    {
        using var activity = _activitySource.StartActivity("DoSomething");
        try
        {
            TestNamespace.TestClass.DoSomething(message);
            activity?.SetStatus(ActivityStatusCode.Ok);
        }
        catch (Exception ex)
        {
            activity?.SetStatus(ActivityStatusCode.Error, ex.Message);
            activity?.SetTag("exception.type", ex.GetType().FullName);
            activity?.SetTag("exception.message", ex.Message);
            throw;
        }
    }
}

  }
]